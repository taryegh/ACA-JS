//////////////////////////////////////////////////////////////
There are 7 basic data types in JavaScript.

- number for numbers of any kind: integer or floating-point.
- string for strings. A string may have one or more characters, there’s no separate single-character type.
- boolean for true/false.
- null for unknown values – a standalone type that has a single value null.
- undefined for unassigned values – a standalone type that has a single value undefined.
- object for more complex data structures.
- symbol for unique identifiers.



//////////////////////////////////////////////////////////////

typeof undefined // "undefined"

typeof 0 // "number"

typeof true // "boolean"

typeof "foo" // "string"

typeof Symbol("id") // "symbol"

typeof Math // "object"  (1)

typeof null // "object"  (2)

typeof alert // "function"  (3)



//////////////////////////////////////////////////////////////

typeof Number
"function"

typeof Number()
"number"

typeof Object
"function"

typeof Function
"function"

typeof String
"function"





//////////////////////////////////////////////////////////////

alert( Number("   123   ") ); // 123
alert( Number("123z") );      // NaN (error reading a number at "z")
alert( Number(true) );        // 1
alert( Number(false) );       // 0
Please note that null and undefined behave differently here: null becomes zero while undefined becomes NaN.




//////////////////////////////////////////////////////////////


Almost all mathematical operations convert values to numbers. A notable exception is addition +. If one of the added values is a string, the other one is also converted to a string.

Then, it concatenates (joins) them:

alert( 1 + '2' ); // '12' (string to the right)
alert( '1' + 2 ); // '12' (string to the left)

This only happens when at least one of the arguments is a string. Otherwise, values are converted to numbers.


//////////////////////////////////////////////////////////////


ToNumber

Value -	      Becomes…
undefined	    NaN
null	        0
true / false	1 / 0
string	The string is read “as is”, whitespaces from both sides are ignored. An empty string becomes 0. An error gives NaN.


//////////////////////////////////////////////////////////////


ToBoolean – Occurs in logical operations. Can be performed with Boolean(value).
Value	                        Becomes…
0, null, undefined, NaN, ""	  false
any other value	              true


//////////////////////////////////////////////////////////////


"" + 1 + 0 // '10' ok
"" - 1 + 0 // -1 ok
true + false // 1 ok
6 / "3" // 2 ok
"2" * "3" // 6 ok
4 + 5 + "px" // '9px' ok
"$" + 4 + 5 // '$45' ok
"4" - 2 // 2 ok
"4px" - 2 // NAN ok
7 / 0 // infinity ok
"  -9  " + 5 // ' -9 5' ok
"  -9  " - 5 // -14 ok
null + 1 // 1 (null becomes 0)
undefined + 1 // NAN (undefined becomes NAN)




//////////////////////////////////////////////////////////////

When comparing values of different types, JavaScript converts the values to numbers.

For example:

alert( '2' > 1 ); // true, string '2' becomes a number 2
alert( '01' == 1 ); // true, string '01' becomes a number 1


For boolean values, true becomes 1 and false becomes 0.

For example:

alert( true == 1 ); // true
alert( false == 0 ); // true

//////////////////////////////////////////////////////////////



It is possible that at the same time:

Two values are equal.
One of them is true as a boolean and the other one is false as a boolean.
For example:

 let a = 0;
alert( Boolean(a) ); // false

let b = "0";
alert( Boolean(b) ); // true

alert(a == b); // true!




//////////////////////////////////////////////////////////////

What will be the result for these expressions?

5 > 4 // true
"apple" > "pineapple" // false
"2" > "12" // true
undefined == null // true
undefined === null // false
null == "\n0\n" // false
null === +"\n0\n" // false


//////////////////////////////////////////////////////////////


alert - shows a message.
prompt - shows a message asking the user to input text. It returns the text or, if CANCEL or Esc is clicked, null.
confirm - shows a message and waits for the user to press “OK” or “CANCEL”. It returns true for OK and false for CANCEL/Esc.

//////////////////////////////////////////////////////////////

[] + {}
"[object Object]"

[] + []
""

[] + 3
"3"

{} + ""
0

{} + '1'
1

{} + 1
1

"" + 7
"7"

null + {}
"null[object Object]"

null + undefined
NaN

'' + NaN
"NaN"

{} * 2
VM385:1 Uncaught SyntaxError: Unexpected token *

{} -1
-1

[] + 1
"1"

[] - 1
-1





//////////////////////////////////////////////////////////////

What is the code below going to output?

alert( null || 2 || undefined );

The answer is 2, that’s the first truthy value.
 alert( null || 2 || undefined );



//////////////////////////////////////////////////////////////



What will the code below output?

alert( alert(1) || 2 || alert(3) );


The answer: first 1, then 2.

alert( alert(1) || 2 || alert(3) );
The call to alert does not return a value. Or, in other words, it returns undefined.

The first OR || evaluates it’s left operand alert(1). That shows the first message with 1.
The alert returns undefined, so OR goes on to the second operand searching for a truthy value.
The second operand 2 is truthy, so the execution is halted, 2 is returned and then shown by the outer alert.
There will be no 3, because the evaluation does not reach alert(3).





//////////////////////////////////////////////////////////////


What is this code going to show?

alert( 1 && null && 2 );


What will this code show?

alert( alert(1) && alert(2) );


//////////////////////////////////////////////////////////////


What will the result be?

alert( null || 2 && 3 || 4 ); // 3


//////////////////////////////////////////////////////////////



